# XPEG - Parsing Expression Grammars (PEG) adapted
# 
# Author: Helton Carlos de Souza <helton.development@gmail.com>
#
# Useful links:
#   - PEG specification        <http://www.brynosaurus.com/pub/lang/peg.pdf>
#   - Parsimonious (in Python) <https://github.com/erikrose/parsimonious>
#   - Citrus (in Ruby)         <https://github.com/mjijackson/citrus>
#   - Parselet (in Ruby)       <https://github.com/kschiess/parslet>

rules = _ rule+
rule = identifier assignment expression
assignment = "=" _
literal = /\".*?[^\\]\"/is _
expression = ored | sequence | term
or_term = "|" _ term
ored = term or_term+
sequence = term term+
negative_lookahead_term = "!" term _
lookahead_term = "&" term _
term = lookahead_term | negative_lookahead_term | quantified | repetition | atom
quantified = atom quantifier
atom = reference | literal | regex | parenthesized
regex = ///.*?[^\\]/// /[imesp]*/is _
parenthesized = "(" _ expression ")" _
quantifier = /[*+?]/ _
repetition = /{[0-9]+(\s*,\s*([0-9]+)?)?}/ _
reference = identifier !assignment
identifier = /[a-z_][a-z0-9_]*/i _
_ =  meaninglessness*
meaninglessness = /\s+/ | comment
comment = /#[^\r\n]*/s