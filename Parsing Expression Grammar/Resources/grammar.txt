# XPEG - Parsing Expression Grammars (PEG) adapted
# 
# Author: Helton Carlos de Souza <helton.development@gmail.com>
#
# Useful links:
#   - PEG specification        <http://www.brynosaurus.com/pub/lang/peg.pdf>
#   - Parsimonious (in Python) <https://github.com/erikrose/parsimonious>
#   - Citrus (in Ruby)         <https://github.com/mjijackson/citrus>
#   - Parselet (in Ruby)       <https://github.com/kschiess/parslet>

rules = _ rule+
rule = identifier assignment expression
assignment = "=" _
literal = /\".*?[^\\]\"/i _
expression = ored | sequence | term
or_term = "|" _ term
ored = term or_term+
sequence = term term+
negative_lookahead_term = "!" term _
lookahead_term = "&" term _
term = term_label factor
term_label = (identifier ":")?
factor = lookahead_term | negative_lookahead_term | quantified | atom
quantified = repeat_exactly | repeat_range | repeat_at_least | repeat_up_to | repeat_zero_or_more | repeat_one_or_more | optional
repeat_exactly = atom "{" _ unsigned_int  _ "}" _
repeat_range = atom "{" _ unsigned_int _ "," _ unsigned_int _ "}" _
repeat_at_least = atom "{" _ unsigned_int _ "," _ "}" _
repeat_up_to = atom "{" _ "," _ unsigned_int _ "}" _
repeat_zero_or_more = atom "*" _
repeat_one_or_more = atom "+" _
optional = atom "?" _
unsigned_int = /[1-9][0-9]*/ _
any = "." _
atom = reference | literal | regex | parenthesized | any
regex = /\/.*?[^\\]\// /[imesp]*/i? _
parenthesized = "(" _ expression ")" _
reference = identifier !assignment
identifier = /[a-z_][a-z0-9_]*/i _
_ = /\s+/? | comment
comment = /#.*?(?:\r\n|$)/