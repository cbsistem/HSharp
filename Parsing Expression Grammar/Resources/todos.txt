(  ) - Fixed error when try define a name to an expression that is a rule reference
(OK) - Add expression name in Node
(  ) - Improve the unit tests
(  ) - Improve error message with more details
(  ) - when a rule is referenced but not defined -> raise an exception
(  ) - Add warning messages
  - when a rule is defined but not used
(OK) - Add quantifiers expressions
  - OptionalExpression
  - OneOrMoreExpression
  - ZeroOrMoreExpression
(OK) - Add TRuleReferenceExpression
(OK) - Add anottaded gramamr with custom attributes
  ex.:
    TMyLanguageVisitor = class(TBaseVisitor)
    public
      [DefaultRule]
      [Rule('ID <- ~"[a-z]+"il')]
      function ID_Rule(const aNodes: array of INode): TValue;
(OK) - TBaseVisitor should build the grammar based on custom attributes
(OK) - Add Nodes
(OK) - Add LazyEvaluation support (ex. IF statement cannot be computed until the user wants to)
  - (OK) Create attribute LazyEvaluation to rules
(OK) - If after parse and context.EOF -> raise exception 
(OK) - Add label to subexpressions:
  ex.: 'ID = part1:/[a-z_]+/il part2:/[a-z0-9_]/il'
(..) - Add multiple repetition (like regex, vide Citrus)
(  ) - fix comment support
(  )  - Add multiline comment option

[Rule('IF = "if" _ expr _ stmt ( "else" _ stmt ) ?')]
[LazyEvaluation]
function IF(const aNode: INode): TValue;
var
  ElseNode: INode
begin
  if aNode.Child[2].AsBoolean then //if aNode.Child['expr'].AsBoolean
    Result := aNode.Child[4].Call
  else
  begin
    ElseNode = aNode.Child[5];
    if not ElseNode.IsEmpty then // or if Assigned(ElseNode) then ?
      Result := ElseNode.Child[3].Call;
  end;
end;
