unit TestHSharp_Mock;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  HSharp.Mock.Interfaces,
  HSharp.Mock;

type
  TClassFoo = class
  public
    procedure MethodOfFooClass; virtual;
  end;

  IntfFoo = interface(IInvokable)
    procedure Proc;
    function Func: String;
  end;

  // Test methods for class TMock
  TestTMock = class(TTestCase)
  strict private
    FMockOfObject: TMock<TClassFoo>;
    FMockOfInterface: TMock<IntfFoo>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Test_Instance;
    procedure Test;
  end;

implementation

uses
  Vcl.Dialogs,
  System.SysUtils;

procedure TestTMock.SetUp;
begin
  FMockOfObject    := TMock<TClassFoo>.Create;
  FMockOfInterface := TMock<IntfFoo>.Create;
end;

procedure TestTMock.TearDown;
begin
  FreeAndNil(FMockOfObject);
  FreeAndNil(FMockOfInterface);
end;

procedure TestTMock.Test;
begin
  FMockOfObject.Instance.MethodOfFooClass;
  FMockOfInterface.Instance.Proc;
end;

procedure TestTMock.Test_Instance;
begin
  CheckNotNull(FMockOfInterface.Instance, 'Instance of TMock<T> cannot be null [T is a interface]');
  CheckNotNull(FMockOfObject.Instance,    'Instance of TMock<T> cannot be null [T is a class]');
end;

{ TClassFoo }

procedure TClassFoo.MethodOfFooClass;
begin
  ShowMessage('Foo');
end;

initialization
  RegisterTest('HSharp.Mock', TestTMock.Suite);

end.

