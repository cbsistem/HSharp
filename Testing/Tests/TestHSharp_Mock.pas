{***************************************************************************}
{                                                                           }
{           HSharp Framework for Delphi                                     }
{                                                                           }
{           Copyright (C) 2014 Helton Carlos de Souza                       }
{                                                                           }
{***************************************************************************}
{                                                                           }
{  Licensed under the Apache License, Version 2.0 (the "License");          }
{  you may not use this file except in compliance with the License.         }
{  You may obtain a copy of the License at                                  }
{                                                                           }
{      http://www.apache.org/licenses/LICENSE-2.0                           }
{                                                                           }
{  Unless required by applicable law or agreed to in writing, software      }
{  distributed under the License is distributed on an "AS IS" BASIS,        }
{  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. }
{  See the License for the specific language governing permissions and      }
{  limitations under the License.                                           }
{                                                                           }
{***************************************************************************}

unit TestHSharp_Mock;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  HSharp.Mock.Interfaces,
  HSharp.Mock;

type
  TClassFoo = class
  public
    procedure MethodOfFooClass; virtual;
  end;

  IntfFoo = interface(IInvokable)
    procedure Proc;
    function Func: String;
  end;

  // Test methods for class TMock
  TestTMock = class(TTestCase)
  strict private
    FMockOfObject: TMock<TClassFoo>;
    FMockOfInterface: TMock<IntfFoo>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Test_Instance;
    procedure Test;
  end;

implementation

uses
  Vcl.Dialogs,
  System.SysUtils;

procedure TestTMock.SetUp;
begin
  FMockOfObject    := TMock<TClassFoo>.Create;
  FMockOfInterface := TMock<IntfFoo>.Create;
end;

procedure TestTMock.TearDown;
begin
  FreeAndNil(FMockOfObject);
  FreeAndNil(FMockOfInterface);
end;

procedure TestTMock.Test;
begin
  FMockOfObject.Instance.MethodOfFooClass;
  FMockOfInterface.Instance.Proc;
  FMockOfInterface.Setup.WillReturn('test').When.Func;
  CheckEquals('test', FMockOfInterface.Instance.Func);
end;

procedure TestTMock.Test_Instance;
begin
  CheckNotNull(FMockOfInterface.Instance, 'Instance of TMock<T> cannot be null [T is a interface]');
  CheckNotNull(FMockOfObject.Instance,    'Instance of TMock<T> cannot be null [T is a class]');
end;

{ TClassFoo }

procedure TClassFoo.MethodOfFooClass;
begin
  ShowMessage('Foo');
end;

initialization
  RegisterTest('HSharp.Mock', TestTMock.Suite);

end.

