unit TestHSharp_WeakReference;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  HSharp.WeakReference;

type
  IChild = interface;

  IParent = interface
  ['{62DC70E1-8D82-4012-BF01-452EB0F7F45A}']
    procedure AddChild(const AChild : IChild);
  end;

  IChild = interface
  ['{E1DB1DA0-55D6-408E-8143-072CA433412D}']
  end;

  TParent = class(TInterfacedObject, IParent)
  private
    FChild: IChild;
    procedure AddChild(const aChild: IChild);
  public
    destructor Destroy; override;
  end;

  TChild = class(TInterfacedObject, IChild)
  private
    FParent: Weak<IParent>;
  public
    constructor Create(aParent: IParent);
    destructor Destroy; override;
  end;

  TestWeak = class(TTestCase)
  published
    procedure Test_Weak;
  end;

implementation

uses
  System.Rtti,
  System.SysUtils;

{ TChild }

constructor TChild.Create(aParent: IParent);
begin
  inherited Create;
  FParent := aParent;
  AParent.AddChild(Self);
end;

destructor TChild.Destroy;
begin
  FParent := nil;
  inherited;
end;

{ TParent }

procedure TParent.AddChild(const aChild: IChild);
begin
  FChild := aChild;
end;

destructor TParent.Destroy;
begin
  if Assigned(FChild) then
    FChild := nil;
  inherited;
end;

{ TestWeak }

procedure TestWeak.Test_Weak;
var
  MyParent: IParent;
  MyChild: IChild;
  VmiParent, VmiChild: TVirtualMethodInterceptor;
  DestructorOfParentWasCalled,
  DestructorOfChildWasCalled: Boolean;

  procedure CreateVirtualMethodInterceptors;
  begin
    VmiParent := TVirtualMethodInterceptor.Create(TParent);
    VmiChild  := TVirtualMethodInterceptor.Create(TChild);
    VmiParent.OnBefore :=
      procedure(aInstance: TObject; aMethod: TRttiMethod;
                const aArgs: TArray<TValue>; out aDoInvoke: Boolean;
                out Result: TValue)
      begin
        if aMethod.Name = 'FreeInstance' then
          DestructorOfParentWasCalled := True;
      end;
    VmiChild.OnBefore :=
      procedure(aInstance: TObject; aMethod: TRttiMethod;
                const aArgs: TArray<TValue>; out aDoInvoke: Boolean;
                out Result: TValue)
      begin
        if aMethod.Name = 'FreeInstance' then
          DestructorOfChildWasCalled := True;
      end;
  end;

  procedure SetupVirtualMethodInterceptors;
  begin
    VmiParent.Proxify(MyParent as TParent);
    VmiChild.Proxify(MyChild as TChild);
  end;

  procedure ReleaseVirtualMethodInterceptors;
  begin
    VmiParent.Free;
    VmiChild.Free;
  end;

begin
  CreateVirtualMethodInterceptors;

  MyParent := TParent.Create;
  MyChild  := TChild.Create(MyParent);

  SetupVirtualMethodInterceptors;

  MyChild  := nil;
  MyParent := nil;

  ReleaseVirtualMethodInterceptors;

  CheckTrue(DestructorOfParentWasCalled, 'FreeInstance of parent was not called.');
  CheckTrue(DestructorOfChildWasCalled,  'FreeInstance of child was not called.');
end;

initialization
  RegisterTest('HSharp.Weak', TestWeak.Suite);

end.

